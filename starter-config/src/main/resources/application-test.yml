# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use
# For example: application-dev.yml if you use the "dev" profile.
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# https://docs.spring.io/spring-boot/reference/features/profiles.html
# ===================================================================

logging:
  level:
    root: debug
    vn.ptit.model: debug
    vn.ptit.config: debug
    org.springframework.security: debug
  charset:
    console: UTF-8
    file: UTF-8
  # Custom properties to define logs file paths according to different profiles
  file:
    path: opt/logs

spring:
  application:
    name: starter-config
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ars_auth_db?serverTimezone=UTC
    username: admin
    password: 123456
    hikari:
      poolName: Hikari
      # AllowPoolSuspension means pause connection when there is a problem
      # When the setting is false, the system will not allow to pause connections in pool
      # Helping to maintain continuous system operation even when there is a problem
      allow-pool-suspension: false
      auto-commit: false # Do not automatically commit transactions
      maximumPoolSize: 30 # Maximum database connections
      minimumIdle: 3 # At least connections will be kept idle, ready for use
      maxLifetime: 1200000 # Maximum time (20 minutes) that a connection can exist in the pool before being closed and recreated
      idleTimeout: 180000 # Maximum time (3 minutes) that a connection can be idle before being closed
      connectionTimeout: 200000 # Maximum time (3 minutes 20s) to wait for connection from pool when no connection is available
      leak-detection-threshold: 200000 # If a connection is not returned to the pool after 3 minutes 20s, it will be detected as a "leak"
      data-source-properties:
        cachePrepStmts: true # Enable caching to improve performance when using multiple identical statements
        prepStmtCacheSize: 100 # Prepared statement cache size. In this case, the cache can hold up to 100 statements
        prepStmtCacheSqlLimit: 1024 # Limits the maximum length (in bytes) of an SQL statement that can be cached
        useServerPrepStmts: true # Enable server-side prepared statements instead of client-side prepared statements
  sql:
    init:
      mode: never
  jpa:
    # Avoid causing LazyInitializationException if querying outside the scope of EntityManager or causing poor performance
    open-in-view: false
    hibernate:
      # Hibernate only checks if the current schema matches the entity
      # If it does not match, the application will not start
      # Do not make any changes to the schema
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: true
        format_sql: false
        jdbc:
          time_zone: UTC
          ddl-auto: validate
  jackson:
    time-zone: UTC

server:
  servlet:
    session:
      cookie:
        # The session cookie that Spring Boot creates will have the HttpOnly attribute
        # Setting HttpOnly helps protect cookies from Cross-Site Scripting (XSS) attacks
        # Cookies will still be sent with each HTTP request (and can therefore be used for session authentication)
        # But Cookies cannot be accessed from the client side using JavaScript (e.g. via document.cookie)
        http-only: true
  port: 8880

app:
  features:
    datasource: enabled
    jpa-auditing: enabled
    rest-template: enabled
    resources: enabled

  security:
    authentication-type: header_forwarded
    jwt:
      base64-secret-key: ZGN0LWJhc2Utc2VjcmV0LWtleS10b2tlbi12YWxpZGl0eS04NjQwMDAwMG1zLWZvci1yZW1lbWJlci1tZS04NjQwMDAwMG1z
      validity: 3600000 # 1 hour
      validity-for-remember: 604800000 # 7 days
    public-request-patterns:
      - /api/p/**
      - /actuator/**

  resilience4j:
    circuit-breaker:
      enabled: true
      slowCallDurationThreshold: 2  # If request call > 2s → considered slow
      slowCallRateThreshold: 75     # If ≥75% of calls are delayed → open circuit
      slidingWindowSize: 5      # Use a sliding window of size 5 most recent calls to calculate the error
      minimumNumberOfCalls: 3   # Only start evaluating errors after at least 3 requests
      # When circuit breaker opens → after timeout → switches to half-open state, allowing 3 retry requests for testing
      permittedNumberOfCallsInHalfOpenState: 3
      waitDurationInOpenState: 10   # When circuit is open, wait 10s before allowing retry
      # After waitDurationInOpenState, automatically switch from open to half-open (no new request required)
      automaticTransitionFromOpenToHalfOpenEnabled: true
      failureRateThreshold: 50      # If error rate > 50% in slidingWindowSize → open circuit (disconnect)
      connect-timeout: 10000
      read-timeout: 5000

    retry:
      retryMaxAttempts: 3
      retryWaitDuration: 1000

    timelimiter:
      cancel-running-future: true
      overall-timeout: 10000

  i18n:
    base-names:
      - classpath:i18n/messages
    encoding: UTF-8

  resources:
    static-resource:
      patterns:
        - /**.html
        - /**.js
        - /**.css
        - /**.webp
        - /**.jpg
        - /**.jpeg
        - /**.gif
        - /**.svg
        - /**.png
        - /**.ico
        - /uploads/**
        - /file/**
        - /i18n/**
      locations:
        - classpath:/static/
    upload-resource:
      patterns:
        - /uploads/
      locations:
        - opt/uploads/

  interceptor:
    excluded-patterns:
      - /**.html
      - /**.js
      - /**.css
      - /**.webp
      - /**.jpg
      - /**.jpeg
      - /**.gif
      - /**.svg
      - /**.png
      - /**.ico
      - /uploads/**
      - /file/**
      - /login
      - /error**
      - /i18n/**
